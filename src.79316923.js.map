{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","canProcess","id","reject","logSuccess","logError","warn","amount","catch"],"mappings":";AAAA,MAAMA,EAAQC,GAEL,IAAIC,QAAQC,IACjBC,WAAW,IAAMD,EAAQF,GAAKA,KAI5BI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACZjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAC3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAGvDhB,OAAAA,QAAQC,QAAQa,IAGpBX,EAASW,GAAgBT,QAAQY,MAAMH,GAE7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AClBnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB3B,MAAAA,EAAQoB,EAA0B,IAAK,KAGzCQ,OAFeL,KAAKE,SAAW,GAG1BvB,QAAQC,QAAQwB,EAAYE,GAAI7B,GAGlCE,QAAQ4B,OAAOH,EAAYE,KAG9BE,EAAa,CAACF,EAAIvB,KACtBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1C0B,EAAYH,IAChBtB,QAAQ0B,qCAAqCJ,+BAa/CH,EAAgB,CAAEG,GAAI,GAAIK,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAEhEN,EAAgB,CAAEG,GAAI,GAAIK,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAEhEN,EAAgB,CAAEG,GAAI,GAAIK,OAAQ,KAAMzB,KAAKsB,GAAYI,MAAMH,GAE/DN,EAAgB,CAAEG,GAAI,GAAIK,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH;;ACrChE,aAFA,QAAA,eACA,QAAA,eACA,QAAA","file":"src.79316923.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n  // Твой код\n  return new Promise(resolve => {\n    setTimeout(() => resolve(ms), ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n  \n   return Promise.resolve(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  const canProcess = Math.random() > 0.3;\n\n  if (canProcess) {\n    return Promise.resolve(transaction.id, delay);\n  }\n\n  return Promise.reject(transaction.id);\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = (id) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n\n","import './js/task-1';\nimport './js/task-2';\nimport './js/task-3';\n"]}